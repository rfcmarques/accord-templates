/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.digitalsign.simpleslarenewalexample

import org.accordproject.cicero.contract.*
import org.accordproject.cicero.runtime.*
import org.accordproject.time.*
import org.accordproject.money.*


/*
 * Esta função define o valor do pagamento que será efetuado.
 * O valor será sempre diferente consoante o valor de pontos atribuído.
 */
define function definePayment(points:Double,amount:Double) : MonetaryAmount {
  let finalValue = 
    if points >= 99.0
    then amount
    else if points >= 95.0 and points < 99.0
    then amount*0.9
    else 0.0;

    let monetaryAmount = MonetaryAmount{
        doubleValue : finalValue,
        currencyCode: EUR
    };

    return monetaryAmount
}

/*
 * Esta função serve para a criação de uma obrigação de pagamento .
 * Esta função recebe um contrato, um provider, um consumer e um valor monetário.
 * Retorna uma PaymentObligation que utiliza os dados recebidos.
*/
define function createPaymentObligation(
    acontract:AccordContract,
    serviceProvider:AccordParty,
    serviceConsumer:AccordParty,
    amount: MonetaryAmount
  ) : PaymentObligation {
  return
    PaymentObligation{
      contract: acontract,
      promisor: some(serviceProvider),
      promisee: some(serviceConsumer),
      deadline: none,
      amount: amount,
      description: "Pagamento efetuado por " ++ serviceProvider.partyId ++ " a " ++ serviceConsumer.partyId
    }
}

define function getNextRenewalDate(finaldate:DateTime,duration:Period) : String {
  return
    format(addPeriod(finaldate, duration), "DD/MM/YYYY")
}

contract MyLogic over MyContract {
  // Simple Clause
  clause helloworld(request : MyRequest) : MyResponse emits PaymentObligation {

    enforce request.slapoints >= 0.0
        and request.slapoints < 100.0
    else throw ErgoErrorResponse{ message: "A pontuação dada tem que se encontrar no intervalo de 0 a 100" };

    info(format(addPeriod(contract.contractDate, contract.duration), "DD/MM/YYYY"));
    info(definePayment(request.slapoints,contract.amount));

    if request.slapoints >= 95.0 then
     emit
      createPaymentObligation(
        contract,
        contract.Employer,
        contract.Employee,
        definePayment(request.slapoints,contract.amount));

     return MyResponse{ 
       paymentConfirmation: "O trimestre foi pago na totalidade",
       contractInfo: "O contrato foi renovado e termina a " ++ getNextRenewalDate(contract.contractDate, contract.duration),
       contractEnd: getNextRenewalDate(contract.contractDate, contract.duration)
       }

    else 
     return MyResponse{ 
       paymentConfirmation: "O trimestre não foi pago por má avaliação",
       contractInfo: "O contrato não foi renovado.",
       contractEnd: ""
       }
  }
}